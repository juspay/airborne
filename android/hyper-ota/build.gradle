// Copyright 2025 Juspay Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
    id 'signing'
    id 'com.gradleup.nmcp'
}

android {
    namespace = "in.juspay.hyperota"
    compileSdk = 35

    defaultConfig {
        minSdk = 21
        targetSdk = 35

        consumerProguardFiles "consumer-rules.pro"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        qa {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }

    buildTypes.configureEach {
        def moduleName = project.name.replaceAll('-', '_')
        resValue 'string', "${moduleName}_version", rootProject.ext.hyper_sdk_version
        resValue 'string', "${moduleName}_build_version", rootProject.ext.hyper_sdk_build_version
    }

    buildFeatures {
        buildConfig true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

def resolveVersion() {
    def tag = System.getenv("GITHUB_REF_NAME")
    if (tag != null && tag.startsWith("v")) return tag.substring(1)
    return "SNAPSHOT"
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                groupId = 'io.juspay'
                artifactId = 'airborne'
                version = System.getenv("VERSION") ?: resolveVersion()

                pom {
                    name = 'Airborne'
                    description = 'Airborne empowers developers to effortlessly integrate Over-The-Air (OTA) update capabilities into their Android, iOS, and React Native applications. Our primary focus is to provide robust, easy-to-use SDKs and plugins that streamline the update process directly within your client applications.'
                    url = 'https://github.com/juspay/airborne'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'juspay'
                            name = 'Juspay'
                            email = 'pp-sdk@juspay.in'
                        }
                    }
                    scm {
                        connection = 'scm:git:github.com/juspay/airborne.git'
                        developerConnection = 'scm:git:ssh://github.com/juspay/airborne.git'
                        url = 'https://github.com/juspay/airborne/tree/main/android/hyper-ota'
                    }
                }
            }
        }
    }

    signing {
        def key = findProperty("signingKey") ?: System.getenv("SIGNING_KEY")
        def pass = findProperty("signingPassword") ?: System.getenv("SIGNING_PASSWORD")
        if (key && pass) {
            useInMemoryPgpKeys(key, pass)
            sign publishing.publications.release
        }
    }

}

nmcp {
    // nothing required here for defaults
}

dependencies {

    implementation('androidx.appcompat:appcompat:1.1.0')
    implementation('com.google.android.material:material:1.12.0')
    implementation('androidx.core:core-ktx:1.1.0')
    implementation('com.squareup.okhttp3:okhttp:3.3.0')

    testImplementation('junit:junit:4.13.2')
    androidTestImplementation('androidx.test.ext:junit:1.2.1')
    androidTestImplementation('androidx.test.espresso:espresso-core:3.6.1')
}
